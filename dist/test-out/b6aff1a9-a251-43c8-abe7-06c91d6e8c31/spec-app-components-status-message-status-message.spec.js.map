{
  "version": 3,
  "sources": ["src/app/components/status-message/status-message.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { StatusMessageComponent } from './status-message';\n\ndescribe('StatusMessageComponent', () => {\n  let component: StatusMessageComponent;\n  let fixture: ComponentFixture<StatusMessageComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [StatusMessageComponent]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(StatusMessageComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should not display message when message is empty', () => {\n    component.message = '';\n    fixture.detectChanges();\n    const messageElement = fixture.nativeElement.querySelector('.status-message');\n    expect(messageElement).toBeNull();\n  });\n\n  it('should display message with error type by default', () => {\n    component.message = 'Test message';\n    fixture.detectChanges();\n    const messageElement = fixture.nativeElement.querySelector('.status-message');\n    expect(messageElement).toBeTruthy();\n    expect(messageElement.classList.contains('error')).toBeTrue();\n  });\n\n  it('should display message with correct type', () => {\n    const types: ('error' | 'loading' | 'success')[] = ['error', 'loading', 'success'];\n    \n    types.forEach(type => {\n      component.type = type;\n      component.message = 'Test message';\n      fixture.detectChanges();\n      \n      const messageElement = fixture.nativeElement.querySelector('.status-message');\n      expect(messageElement.classList.contains(type)).toBeTrue();\n    });\n  });\n\n  it('should update message content', () => {\n    const testMessage = 'Test message';\n    component.message = testMessage;\n    fixture.detectChanges();\n    \n    const messageContent = fixture.nativeElement.querySelector('.message');\n    expect(messageContent.textContent).toBe(testMessage);\n  });\n}); "],
  "mappings": ";;;;;;;;;;;;;;AAAA;;;AACA;AAEA,aAAS,0BAA0B,MAAK;AACtC,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,sBAAsB;SACjC,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,sBAAsB;AACxD,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,oDAAoD,MAAK;AAC1D,kBAAU,UAAU;AACpB,gBAAQ,cAAa;AACrB,cAAM,iBAAiB,QAAQ,cAAc,cAAc,iBAAiB;AAC5E,eAAO,cAAc,EAAE,SAAQ;MACjC,CAAC;AAED,SAAG,qDAAqD,MAAK;AAC3D,kBAAU,UAAU;AACpB,gBAAQ,cAAa;AACrB,cAAM,iBAAiB,QAAQ,cAAc,cAAc,iBAAiB;AAC5E,eAAO,cAAc,EAAE,WAAU;AACjC,eAAO,eAAe,UAAU,SAAS,OAAO,CAAC,EAAE,SAAQ;MAC7D,CAAC;AAED,SAAG,4CAA4C,MAAK;AAClD,cAAM,QAA6C,CAAC,SAAS,WAAW,SAAS;AAEjF,cAAM,QAAQ,UAAO;AACnB,oBAAU,OAAO;AACjB,oBAAU,UAAU;AACpB,kBAAQ,cAAa;AAErB,gBAAM,iBAAiB,QAAQ,cAAc,cAAc,iBAAiB;AAC5E,iBAAO,eAAe,UAAU,SAAS,IAAI,CAAC,EAAE,SAAQ;QAC1D,CAAC;MACH,CAAC;AAED,SAAG,iCAAiC,MAAK;AACvC,cAAM,cAAc;AACpB,kBAAU,UAAU;AACpB,gBAAQ,cAAa;AAErB,cAAM,iBAAiB,QAAQ,cAAc,cAAc,UAAU;AACrE,eAAO,eAAe,WAAW,EAAE,KAAK,WAAW;MACrD,CAAC;IACH,CAAC;;;",
  "names": []
}
