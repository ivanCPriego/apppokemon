{
  "version": 3,
  "sources": ["src/app/components/pokemon-search/pokemon-search.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { PokemonSearchComponent } from './pokemon-search';\nimport { PokemonService } from '../../services/pokemon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { of, throwError } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\nimport { StatusMessageComponent } from '../status-message/status-message';\n\ndescribe('PokemonSearchComponent', () => {\n  let component: PokemonSearchComponent;\n  let fixture: ComponentFixture<PokemonSearchComponent>;\n  let pokemonService: jasmine.SpyObj<PokemonService>;\n  let sanitizer: jasmine.SpyObj<DomSanitizer>;\n\n  const mockPokemon = {\n    id: 1,\n    name: 'bulbasaur',\n    sprites: { front_default: 'url' },\n    types: [{ type: { name: 'grass' } }],\n    stats: [{ base_stat: 45, stat: { name: 'hp' } }]\n  };\n\n  beforeEach(async () => {\n    const pokemonServiceSpy = jasmine.createSpyObj('PokemonService', ['getPokemon']);\n    const sanitizerSpy = jasmine.createSpyObj('DomSanitizer', ['sanitize']);\n\n    await TestBed.configureTestingModule({\n      imports: [FormsModule, StatusMessageComponent],\n      declarations: [],\n      providers: [\n        { provide: PokemonService, useValue: pokemonServiceSpy },\n        { provide: DomSanitizer, useValue: sanitizerSpy }\n      ]\n    }).compileComponents();\n\n    pokemonService = TestBed.inject(PokemonService) as jasmine.SpyObj<PokemonService>;\n    sanitizer = TestBed.inject(DomSanitizer) as jasmine.SpyObj<DomSanitizer>;\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(PokemonSearchComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should load recent searches from sessionStorage on init', () => {\n    const mockSearches = ['pikachu', 'charizard'];\n    spyOn(sessionStorage, 'getItem').and.returnValue(JSON.stringify(mockSearches));\n    \n    component.ngOnInit();\n    \n    expect(component.recentSearches).toEqual(mockSearches);\n  });\n\n  it('should handle invalid input', () => {\n    component.pokemonName = '<script>alert(\"xss\")</script>';\n    sanitizer.sanitize.and.returnValue('');\n    \n    component.searchPokemon();\n    \n    expect(component.error).toBe('Por favor, ingresa un nombre válido (solo letras y números)');\n    expect(pokemonService.getPokemon).not.toHaveBeenCalled();\n  });\n\n  it('should search for pokemon and handle success', fakeAsync(() => {\n    pokemonService.getPokemon.and.returnValue(of(mockPokemon));\n    sanitizer.sanitize.and.returnValue('bulbasaur');\n    spyOn(sessionStorage, 'setItem');\n\n    component.pokemonName = 'bulbasaur';\n    component.searchPokemon();\n    tick();\n\n    expect(component.pokemon).toEqual(mockPokemon);\n    expect(component.error).toBe('');\n    expect(component.loading).toBeFalse();\n    expect(component.successMessage).toBe('¡Pokémon encontrado!');\n  }));\n\n  it('should handle search error', fakeAsync(() => {\n    const errorMessage = 'Pokémon no encontrado';\n    pokemonService.getPokemon.and.returnValue(throwError(() => new Error(errorMessage)));\n    sanitizer.sanitize.and.returnValue('nonexistent');\n\n    component.pokemonName = 'nonexistent';\n    component.searchPokemon();\n    tick();\n\n    expect(component.error).toBe(errorMessage);\n    expect(component.loading).toBeFalse();\n    expect(component.pokemon).toBeNull();\n  }));\n\n  it('should debounce search input', fakeAsync(() => {\n    pokemonService.getPokemon.and.returnValue(of(mockPokemon));\n    sanitizer.sanitize.and.returnValue('bulbasaur');\n\n    component.pokemonName = 'bul';\n    component.onSearchInput();\n    component.pokemonName = 'bulb';\n    component.onSearchInput();\n    component.pokemonName = 'bulba';\n    component.onSearchInput();\n    component.pokemonName = 'bulbasaur';\n    component.onSearchInput();\n\n    tick(200); // Before debounce time\n    expect(pokemonService.getPokemon).not.toHaveBeenCalled();\n\n    tick(100); // After debounce time\n    expect(pokemonService.getPokemon).toHaveBeenCalledWith('bulbasaur');\n    expect(pokemonService.getPokemon).toHaveBeenCalledTimes(1);\n  }));\n\n  it('should add to recent searches', fakeAsync(() => {\n    pokemonService.getPokemon.and.returnValue(of(mockPokemon));\n    sanitizer.sanitize.and.returnValue('bulbasaur');\n    spyOn(sessionStorage, 'setItem');\n\n    component.pokemonName = 'bulbasaur';\n    component.searchPokemon();\n    tick();\n\n    expect(component.recentSearches[0]).toBe('bulbasaur');\n    expect(sessionStorage.setItem).toHaveBeenCalled();\n  }));\n\n  it('should select from recent searches', fakeAsync(() => {\n    pokemonService.getPokemon.and.returnValue(of(mockPokemon));\n    sanitizer.sanitize.and.returnValue('pikachu');\n\n    component.selectRecentSearch('pikachu');\n    tick();\n\n    expect(component.pokemonName).toBe('pikachu');\n    expect(pokemonService.getPokemon).toHaveBeenCalledWith('pikachu');\n  }));\n});\n"],
  "mappings": "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",
  "names": []
}
