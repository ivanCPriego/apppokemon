{
  "version": 3,
  "sources": ["src/app/services/pokemon.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { PokemonService } from './pokemon';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndescribe('PokemonService', () => {\n  let service: PokemonService;\n  let httpMock: HttpTestingController;\n  let sanitizer: jasmine.SpyObj<DomSanitizer>;\n\n  beforeEach(() => {\n    const spy = jasmine.createSpyObj('DomSanitizer', ['sanitize']);\n    spy.sanitize.and.returnValue('sanitized');\n\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [\n        PokemonService,\n        { provide: DomSanitizer, useValue: spy }\n      ]\n    });\n    service = TestBed.inject(PokemonService);\n    httpMock = TestBed.inject(HttpTestingController);\n    sanitizer = TestBed.inject(DomSanitizer) as jasmine.SpyObj<DomSanitizer>;\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n    sessionStorage.clear();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch pokemon data from API', () => {\n    const mockPokemon = {\n      id: 1,\n      name: 'bulbasaur',\n      sprites: { front_default: 'url' },\n      types: [{ type: { name: 'grass' } }],\n      stats: [{ base_stat: 45, stat: { name: 'hp' } }]\n    };\n\n    service.getPokemon('bulbasaur').subscribe(pokemon => {\n      expect(pokemon.name).toBe('sanitized');\n      expect(pokemon.sprites.front_default).toBe('sanitized');\n    });\n\n    const req = httpMock.expectOne('https://pokeapi.co/api/v2/pokemon/bulbasaur');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockPokemon);\n  });\n\n  it('should handle 404 error', () => {\n    service.getPokemon('nonexistent').subscribe({\n      error: (error) => {\n        expect(error.message).toBe('PokÃ©mon no encontrado');\n      }\n    });\n\n    const req = httpMock.expectOne('https://pokeapi.co/api/v2/pokemon/nonexistent');\n    req.flush('Not found', { status: 404, statusText: 'Not Found' });\n  });\n\n  it('should use cached data if available', () => {\n    const mockPokemon = {\n      id: 1,\n      name: 'bulbasaur',\n      sprites: { front_default: 'url' },\n      types: [{ type: { name: 'grass' } }],\n      stats: [{ base_stat: 45, stat: { name: 'hp' } }]\n    };\n\n    service.getPokemon('bulbasaur').subscribe();\n    const req = httpMock.expectOne('https://pokeapi.co/api/v2/pokemon/bulbasaur');\n    req.flush(mockPokemon);\n\n    service.getPokemon('bulbasaur').subscribe(pokemon => {\n      expect(pokemon).toBeTruthy();\n    });\n\n    httpMock.expectNone('https://pokeapi.co/api/v2/pokemon/bulbasaur');\n  });\n\n  it('should sanitize pokemon data', () => {\n    const mockPokemon = {\n      id: 1,\n      name: '<script>alert(\"xss\")</script>bulbasaur',\n      sprites: { front_default: 'javascript:alert(\"xss\")' },\n      types: [{ type: { name: '<img src=x onerror=alert(\"xss\")>' } }],\n      stats: [{ base_stat: 45, stat: { name: '<script>alert(\"xss\")</script>' } }]\n    };\n\n    service.getPokemon('bulbasaur').subscribe(pokemon => {\n      expect(pokemon.name).toBe('sanitized');\n      expect(pokemon.sprites.front_default).toBe('sanitized');\n      expect(pokemon.types[0].type.name).toBe('sanitized');\n      expect(pokemon.stats[0].stat.name).toBe('sanitized');\n    });\n\n    const req = httpMock.expectOne('https://pokeapi.co/api/v2/pokemon/bulbasaur');\n    req.flush(mockPokemon);\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACAA;AACA;AAEA,SAAS,kBAAkB,MAAK;AAC9B,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAK;AACd,UAAM,MAAM,QAAQ,aAAa,gBAAgB,CAAC,UAAU,CAAC;AAC7D,QAAI,SAAS,IAAI,YAAY,WAAW;AAExC,YAAQ,uBAAuB;MAC7B,SAAS,CAAC,uBAAuB;MACjC,WAAW;QACT;QACA,EAAE,SAAS,cAAc,UAAU,IAAG;;KAEzC;AACD,cAAU,QAAQ,OAAO,cAAc;AACvC,eAAW,QAAQ,OAAO,qBAAqB;AAC/C,gBAAY,QAAQ,OAAO,YAAY;EACzC,CAAC;AAED,YAAU,MAAK;AACb,aAAS,OAAM;AACf,mBAAe,MAAK;EACtB,CAAC;AAED,KAAG,qBAAqB,MAAK;AAC3B,WAAO,OAAO,EAAE,WAAU;EAC5B,CAAC;AAED,KAAG,sCAAsC,MAAK;AAC5C,UAAM,cAAc;MAClB,IAAI;MACJ,MAAM;MACN,SAAS,EAAE,eAAe,MAAK;MAC/B,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,QAAO,EAAE,CAAE;MACnC,OAAO,CAAC,EAAE,WAAW,IAAI,MAAM,EAAE,MAAM,KAAI,EAAE,CAAE;;AAGjD,YAAQ,WAAW,WAAW,EAAE,UAAU,aAAU;AAClD,aAAO,QAAQ,IAAI,EAAE,KAAK,WAAW;AACrC,aAAO,QAAQ,QAAQ,aAAa,EAAE,KAAK,WAAW;IACxD,CAAC;AAED,UAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,WAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,QAAI,MAAM,WAAW;EACvB,CAAC;AAED,KAAG,2BAA2B,MAAK;AACjC,YAAQ,WAAW,aAAa,EAAE,UAAU;MAC1C,OAAO,CAAC,UAAS;AACf,eAAO,MAAM,OAAO,EAAE,KAAK,0BAAuB;MACpD;KACD;AAED,UAAM,MAAM,SAAS,UAAU,+CAA+C;AAC9E,QAAI,MAAM,aAAa,EAAE,QAAQ,KAAK,YAAY,YAAW,CAAE;EACjE,CAAC;AAED,KAAG,uCAAuC,MAAK;AAC7C,UAAM,cAAc;MAClB,IAAI;MACJ,MAAM;MACN,SAAS,EAAE,eAAe,MAAK;MAC/B,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,QAAO,EAAE,CAAE;MACnC,OAAO,CAAC,EAAE,WAAW,IAAI,MAAM,EAAE,MAAM,KAAI,EAAE,CAAE;;AAGjD,YAAQ,WAAW,WAAW,EAAE,UAAS;AACzC,UAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,QAAI,MAAM,WAAW;AAErB,YAAQ,WAAW,WAAW,EAAE,UAAU,aAAU;AAClD,aAAO,OAAO,EAAE,WAAU;IAC5B,CAAC;AAED,aAAS,WAAW,6CAA6C;EACnE,CAAC;AAED,KAAG,gCAAgC,MAAK;AACtC,UAAM,cAAc;MAClB,IAAI;MACJ,MAAM;MACN,SAAS,EAAE,eAAe,0BAAyB;MACnD,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,mCAAkC,EAAE,CAAE;MAC9D,OAAO,CAAC,EAAE,WAAW,IAAI,MAAM,EAAE,MAAM,iCAA+B,EAAE,CAAE;;AAG5E,YAAQ,WAAW,WAAW,EAAE,UAAU,aAAU;AAClD,aAAO,QAAQ,IAAI,EAAE,KAAK,WAAW;AACrC,aAAO,QAAQ,QAAQ,aAAa,EAAE,KAAK,WAAW;AACtD,aAAO,QAAQ,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,KAAK,WAAW;AACnD,aAAO,QAAQ,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,KAAK,WAAW;IACrD,CAAC;AAED,UAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,QAAI,MAAM,WAAW;EACvB,CAAC;AACH,CAAC;",
  "names": ["init_testing"]
}
